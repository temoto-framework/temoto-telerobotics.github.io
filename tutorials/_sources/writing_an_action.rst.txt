Writing an Action
=================

.. note:: This tutorial assumes that you are familiar with the concept of `Actions and Semantic Frames <../../../temoto-telerobotics.github.io/site/concepts/actions>`_ in TeMoto.

The basis for an action can be easily generated via TeMoto Action Assistant. Since the structure of an action is defined by its semantic frame, the TeMoto Action Assistant provides the graphical interface for creating a semantic frame. Once you are happy with the semantic frame, a basis for action implementation package is generated, incuding a c++ source file.

For this particular tutorial, we are going to create an action that will be run when temoto_agent receives instruction:

.. raw:: html

    <div style="text-align:center; font-style:italic; font-weight: bold">"put the box on the table"</div><br>


1) Start the TeMoto Action Assistant
""""""""""""""""""""""""""""""""""""

.. code-block:: shell

   roslaunch temoto_action_assistant action_assistant.launch

This should bring up the start screen of the action assistant, depicted in Fig. 1. If you have a feeling that the Action Assistant looks awfully similar to MoveIt! Setup Assistant, then you are correct, it's based on it. Click on the *"Create New TeMoto Action Package"* button.

.. figure:: /images/action_assistant/start_screen.bmp
    :width: 400px
    :align: center

    **Fig. 1:** Start screen of the TeMoto Action Assistant 

2) Create your semantic frame
"""""""""""""""""""""""""""""

Go to the *"Semantic Frame Editor"* tab (depicted in Fig. 2). This tab consists of 3 main sections:

    * **Semantic Frame Viewer** section, which visually shows the structure of the SF.
    * **Item Editor** section, which allows to edit the currently active item in the SF Viewer.
    * **Add/Remove Items** section, which allows to add or remove the currently active item in the SF viewer.

.. figure:: /images/action_assistant/semantic_frame_editor_expl.bmp
    :width: 450px
    :align: center

    **Fig. 2:** Semantic Frame Editor tab 

* Modify the lexical unit above the SF Viewer. In the given example, the lexical unit is *"put"*.
* Select the *input* item of the first interface (Interface 0) and create a new subject by clicking the *"Add to Selected"* button.
* A blank subject is created. Edit this subject via the Subject editor (first highlight the item in the SF Viewer). In the given example the type of the subject is *"what"* and the word is *"box"*.
* Create the second subject in the same way as the first was created and edit it. In the given example the type of the second subject is *"where"* and the word is *"table"*.

3) Generate the action package
""""""""""""""""""""""""""""""

Go to the *"Configuration Files"* tab (depicted in Fig. 3).

* Name the action via *"Action Package Name"* field. The names are automatically forced to follow the `ROS package naming convention <http://www.ros.org/reps/rep-0144.html>`_. So don't be surprised if you cannot use capital letters and whitespaces. Additionally, a prefix of *"ta_"* is added, which stands for TeMoto Action.
* Select the directory where the action package is generated.
* Generate the package by clicking the *"Generate"* button.

.. figure:: /images/action_assistant/generate_action.bmp
    :width: 450px
    :align: center

    **Fig. 3:** Configuration files tab

4) Modify the autogenerated source
""""""""""""""""""""""""""""""""""

Now navigate to the generated package and open the [Action Source](/temoto-telerobotics.github.io/site/concepts/actions) file with your favourite editor. For example:

.. code-block:: shell

    cd temoto_actions/ta_my_example_action/src
    gedit ta_my_example_action.cpp


The [Action Source](/temoto-telerobotics.github.io/site/concepts/actions) file contains a bunch of things that are necessary for TeMoto, but we are going to focus on a ``startInterface_0()`` function. This function corresponds to the interface that is described in the SF.

Locate the block comment which says "YOUR CODE HERE":

.. code-block:: c++

  /*
   * Interface 0 body
   */
  void startInterface_0()
  {
    /* EXTRACTION OF INPUT SUBJECTS */
    TTP::Subject what_0_in = TTP::getSubjectByType("what", input_subjects);
    std::string  what_0_word_in = what_0_in.words_[0];

    TTP::Subject where_1_in = TTP::getSubjectByType("where", input_subjects);
    std::string  where_1_word_in = where_1_in.words_[0];

    /* * * * * * * * * * * * * * * 
     *                           *
     * ===> YOUR CODE HERE <===  *
     *                           *
     * * * * * * * * * * * * * * */

  }

and replace it with your arbitrary code. In this example, the input subjects *"box"* and *"table"* are printed out through ``TEMOTO_INFO_STREAM`` function, which is same as ``ROS_INFO_STREAM`` but adds a bit of debug information in front of the message.

.. code-block:: c++

    /*
     * Interface 0 body
     */
    void startInterface_0()
    {
      /* EXTRACTION OF INPUT SUBJECTS */
      TTP::Subject what_0_in = TTP::getSubjectByType("what", input_subjects);
      std::string  what_0_word_in = what_0_in.words_[0];

      TTP::Subject where_1_in = TTP::getSubjectByType("where", input_subjects);
      std::string  where_1_word_in = where_1_in.words_[0];

      /*
       * MY CODE HERE
       */
      TEMOTO_INFO_STREAM("I will put the " << what_0_word_in << " on the " << where_1_word_in);
    }

5) Compile and test the action
""""""""""""""""""""""""""""""

* Compile the action.
* Test the action by typing *"put the box on the table"* into the temoto termial. The message is printed out in the terminal where the *"temoto_agent"* was launched:

``[temoto_agent/TaPutBoxExample::startInterface_0] I will put the box on the table``

